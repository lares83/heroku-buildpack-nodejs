#!/usr/bin/env bash

set -u            # quit if an uninitialized variable is used
set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

# Output npm debug info on error
trap cat_npm_debug_log ERR

# Look in package.json's engines.node field for a semver range
semver_range=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .engines.node)
npm_semver_range=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .engines.npm)
yarn_semver_range=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .engines.yarn)

get_os() {
  uname | tr '[:upper:]' '[:lower:]'
}

RESOLVE="$bp_dir/vendor/resolve-version-$(get_os)"

resolve() {
  local binary="$1"
  local versionRequirement="$2"
  local n=0
  local output

  # retry this up to 5 times in case of spurious failed API requests
  until [ $n -ge 5 ]
  do
    if output=$($RESOLVE "$binary" "$versionRequirement"); then
      echo "$output"
      return 0
    # don't retry if we get a negative result
    elif [[ $output = "No result" ]]; then
      return 1
    elif [[ $output == "Could not parse"* ]] || [[ $output == "Could not get"* ]]; then
      return 1
    else
      n=$((n+1))
      # break for a second with a linear backoff
      sleep $((n+1))
    fi
  done

  return 1
}

fail_bin_install() {
  local error
  local bin="$1"
  local version="$2"

  # Allow the subcommand to fail without trapping the error so we can
  # get the failing message output
  set +e

  # re-request the result, saving off the reason for the failure this time
  error=$($RESOLVE "$bin" "$version")

  # re-enable trapping
  set -e

  if [[ $error = "No result" ]]; then
    case $bin in
      node)
        echo "Could not find Node version corresponding to version requirement: $version";;
      yarn)
        echo "Could not find Yarn version corresponding to version requirement: $version";;
    esac
  elif [[ $error == "Could not parse"* ]] || [[ $error == "Could not get"* ]]; then
    echo "Error: Invalid semantic version \"$version\""
  else
    echo "Error: Unknown error installing \"$version\" of $bin"
  fi

  return 1
}

set +e
test ! -z "$yarn_semver_range" -a "$yarn_semver_range" != "null"
use_yarn=$?
set -e

echo "Resolving node version $semver_range..."
node_resolve_result=$(resolve node "$semver_range" || echo "failed")
read -r node_version node_url < <(echo "$node_resolve_result")

if [[ "$node_resolve_result" == "failed" ]]; then
  fail_bin_install node "$semver_range"
fi

# Recommend using semver ranges in a safe manner
if [ "$semver_range" == "null" ]; then
  protip "Specify a node version in package.json"
  semver_range=""
elif [ "$semver_range" == "*" ] || [ "$npm_semver_range" == "*" ]; then
  protip "Avoid using semver ranges like '*' in engines.node"
elif [ ${semver_range:0:1} == ">" ] ||  [ ${npm_semver_range:0:1} == ">" ]; then
  protip "Avoid using semver ranges starting with '>' in engines.node"
fi

# Output info about requested range and resolved node version
if [ "$semver_range" == "" ]; then
  status "Defaulting to latest stable node: $node_version"
else
  status "Requested node range:  $semver_range"
  status "Resolved node version: $node_version"
fi

# Download node from Heroku's S3 mirror of nodejs.org/dist
status "Downloading and installing node ($node_version)..."
curl $node_url -s -o - | tar xzf - -C $build_dir

# Move node (and npm) into ./vendor and make them executable
mkdir -p $build_dir/vendor
mv $build_dir/node-v$node_version-linux-x64 $build_dir/vendor/node
chmod +x $build_dir/vendor/node/bin/*
export PATH=$build_dir/vendor/node/bin:$PATH

# Run subsequent node/npm commands from the build path
cd $build_dir

# When using Yarn we only restore its cache but not node_modules; Yarn uses its local
# cache and doesn't connect to the internet in such a case anyway and it's quite fast
# but at the same time it's more stable to have fresh node_modules copy in every build.
# We're not copying the cache as it can be large but instead use it directly.
if [ ! $use_yarn -eq 0 ]; then
    # If node_modules directory is checked into source control then
    # rebuild any native deps. Otherwise, restore from the build cache.
    if test -d $build_dir/node_modules; then
      status "Founad existing node_modules directory; skipping cache"
      status "Rebuilding any native dependencies"
      npm rebuild 2>&1 | indent
    elif [ -d "$cache_dir/node_modules" ]; then
      status "Restoring node_modules directory from cache"
      cp -r $cache_dir/node_modules $build_dir/
    fi
fi

if [ $use_yarn -eq 0 ]; then
  echo "Resolving yarn version $yarn_semver_range..."
  resolve_result=$(resolve yarn "$yarn_semver_range" || echo "failed")

  if [[ "$resolve_result" == "failed" ]]; then
    fail_bin_install yarn "$yarn_semver_range"
  fi

  read -r yarn_version yarn_url < <(echo "$resolve_result")
  echo "Downloading and installing yarn ($yarn_version)..."
  
  mkdir -p $build_dir/vendor/yarn
  curl $yarn_url -s -L -o - | tar xzf - -C $build_dir/vendor/yarn
  export PATH=$build_dir/vendor/yarn/yarn-v$yarn_version/bin:$PATH

  status "Setting Yarn cache location"
  rm -rf "$cache_dir/node_modules"
  mkdir -p "$cache_dir/yarn-cache"
  yarn config set cache-folder "$cache_dir/yarn-cache"
elif [ ! -z "$npm_semver_range" ] && [ "$npm_semver_range" != "null" ]; then
  npm_version="$(npm --version)"
  status "Requested npm range:  $npm_semver_range"
  status "Resolved npm version: $npm_version"
  npm --global install npm@"$npm_version"
fi


# Make npm output to STDOUT instead of its default STDERR
status "Installing dependencies"
if [ $use_yarn -eq 0 ]; then
  yarn install --production --pure-lockfile 2>&1 | indent
else
  npm install --production --no-optional 2>&1 | indent
fi

if [ ! $use_yarn -eq 0 ]; then
  # yarn prunes packages by default when installing so this is not needed.
  status "Pruning dependencies not specified in package.json"
  npm prune 2>&1 | indent
fi

if [ ! $use_yarn -eq 0 ]; then
    status "Caching node_modules directory for future builds"
    rm -rf "$cache_dir"
    mkdir -p "$cache_dir"
    test -d $build_dir/node_modules && cp -r $build_dir/node_modules $cache_dir/
fi

status "Cleaning up node-gyp and npm artifacts"
rm -rf "$build_dir/.node-gyp"
rm -rf "$build_dir/.npm"

# Update the PATH
status "Building runtime environment"
mkdir -p $build_dir/.profile.d
echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\"" > $build_dir/.profile.d/nodejs.sh


if [ -f bin/post_compile_node ]; then
    echo "-----> Running post-compile-node hook"
    chmod +x bin/post_compile_node
    bin/post_compile_node
fi
